package main

import (
	"fmt"
	tgbotapi "github.com/Syfaro/telegram-bot-api"
	vkapi "github.com/himidori/golang-vk-api"
	"strings"
)

func routeGo(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	words := strings.Split(update.Message.Text, " ")

	if len(words) != 3 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£—É–ø—Å! –ö–∞–∂–µ—Ç—Å—è, —è –Ω–µ —Å–º–æ–≥ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ üòî")
		msg.ReplyToMessageID = update.Message.MessageID
		_, _ = bot.Send(msg)
		return
	}

	accountInstance := Account{
		VkLogin: words[1], VkPass: words[2],
		TgId: update.Message.Chat.ID,
	}

	_, err := vkapi.NewVKClient(vkapi.DeviceIPhone, accountInstance.VkLogin, accountInstance.VkPass, false)

	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£—É–ø—Å! –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã (—è –Ω–µ —Å–º–æ–≥ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç) üòî")
		msg.ReplyToMessageID = update.Message.MessageID
		_, _ = bot.Send(msg)
		return
	}

	for _, account := range AccountList {
		if account.VkLogin == accountInstance.VkLogin &&
			account.TgId == accountInstance.TgId {
			return
		}
	}

	AccountList = append(AccountList, accountInstance)
	AccountInUsing[accountInstance.VkLogin] = true
	_ = saveAccounts(AccountList)

	go runWatchingGoroutine(accountInstance, bot)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∂–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ü§©")
	msg.ReplyToMessageID = update.Message.MessageID
	_, _ = bot.Send(msg)
}

func routeDeleteAccount(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	words := strings.Split(update.Message.Text, " ")

	switch len(words) {
	case 1:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			`–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ /delete –∏ –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ!`)
		msg.ReplyToMessageID = update.Message.MessageID
		_, _ = bot.Send(msg)
	case 2:
		login := words[1]

		exists := false
		targetIdx := -1
		for idx, account := range AccountList {
			if account.VkLogin == login && account.TgId == update.Message.Chat.ID {
				targetIdx = idx
				exists = true
				break
			}
		}

		if !exists {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–•–µ–π! –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è!")
			msg.ReplyToMessageID = update.Message.MessageID
			_, _ = bot.Send(msg)
			return
		}

		AccountList = append(AccountList[:targetIdx], AccountList[targetIdx+1:]...)
		_ = saveAccounts(AccountList)
		delete(AccountInUsing, login)

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–•–æ—Ä–æ—à–æ, —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —è —É–¥–∞–ª–∏–ª!")
		msg.ReplyToMessageID = update.Message.MessageID
		_, _ = bot.Send(msg)
	default:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£—É–ø—Å! –Ø –Ω–µ —Å–º–æ–≥ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ üòî")
		msg.ReplyToMessageID = update.Message.MessageID
		_, _ = bot.Send(msg)
	}

}

func routeStart(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		fmt.Sprintf(
			`–ü—Ä–∏–≤–µ—Ç, %s üòä
–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–±–æ–π –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /go –∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
–ü—Ä–∏–º–µ—Ä: /go vasyaLogin vasyaPassword
				`, update.Message.Chat.FirstName))
	msg.ReplyToMessageID = update.Message.MessageID
	_, _ = bot.Send(msg)
}

func routeDefault(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è üôÅ")
	msg.ReplyToMessageID = update.Message.MessageID
	_, _ = bot.Send(msg)
}
